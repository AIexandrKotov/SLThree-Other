context FERZ {
    random_placing = () => this.ferz_placing(^0..7, ^0..7);
    
    
    fp = s => this.ferz_placing(8 - (new using i64).Parse(s[1 as i32].ToString()), this.alpha.IndexOf(s[0 as i32]) as i64);
    
    
    killing_places = (i64 x, i64 y) => {
        lst = [];
        i = -1;
        lst.Add((x, y));
        while ((i += 1) < 8) {
            lst.Add((x, i));
            lst.Add((i, y));
            
            if (x - i > 0 && y - i > 0)
                lst.Add((x - i - 1, y - i - 1));
            if (x + i < 7 && y + i < 7)
                lst.Add((x + i + 1, y + i + 1));
                
            if (x + i < 7 && y - i > 0)
                lst.Add((x + i + 1, y - i - 1));
            if (x - i > 0 && y + i < 7)
                lst.Add((x - i - 1, y + i + 1));
        }
        return lst;
    };
    
    
    repr = lst => {
        using console;
        using linq;
        i = 0;
        console.writeln($"  {this.alpha |> linq.to_enumerable() |> linq.jts(" ")}\n");
        foreach (x in lst) {
            console.writeln($"{8 - i} {x |> linq.jts(" ")} {8 - i}");
            i += 1;
        }
        console.writeln($"\n  {this.alpha |> linq.to_enumerable() |> linq.jts(" ")}");
    };
    
    
    fill_ferzes = (f) => {
        lst = [];
        i = -1; while ((i += 1) < 8) lst.Add(["_", "_", "_", "_", "_", "_", "_", "_"]);
        foreach (x in f)
            lst[x.Item1][x.Item2] = "F";
        return lst;
    };
    
    
    fill_ferzes_wa = (f) => {
        lst = this.fill_ferzes(f);
        foreach (ferz in f)
            foreach (x in this.killing_places(ferz.Item1, ferz.Item2)) {
                if (lst[x.Item1][x.Item2] != "F")
                    lst[x.Item1][x.Item2] = " ";
            }
        return lst;
    };
    
    
    fill = (x, y) => {
        (x, y) = (y, x);
        lst = this.fill_ferzes([(x, y)]);
        foreach (x in this.killing_places(x, y)) {
            lst[x.Item1][x.Item2] = 1;
        }
        return lst;
    };
    
    
    update_killings = (ferz) => {
        using linq;
        ret = [];
        foreach (x in ferz)
            ret.AddRange(this.killing_places(x.Item1, x.Item2));
        return ret;
    };
    
    
    alpha = "abcdefgh";
    sleep = 50i32;
    errors = [(0, 0), (0, 2), (0, 3), (0, 6), (0, 7), (1, 0), (1, 2), (1, 3), (1, 6), (1, 7), (2, 1), (2, 2), (2, 4), (2, 6), (2, 7), (3, 0), (3, 1), (3, 2), (3, 3), (3, 5), (3, 6), (3, 7), (4, 1), (4, 3), (4, 4), (4, 5), (4, 6), (4, 7), (5, 1), (5, 2), (5, 4), (5, 5), (5, 7), (6, 0), (6, 2), (6, 3), (6, 4), (6, 5), (6, 7), (7, 0), (7, 1), (7, 2), (7, 3), (7, 4), (7, 5), (7, 6), (7, 7)];
    
    
    ferz_placing = (x, y) => {
        using console;
        if (this.errors.Contains((x, y))) {
            console.writeln($"Не удалось подобрать расстановку\nдля стартового ферзя на {this.alpha[y as i32]}{8 - x}");
            return "";
        }
        using linq;
        using System.Threading.Thread;
        ferz = [(x, y)];
        prohibs = <list<tuple<i64, i64>>>[
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[],
            <tuple<i64, i64>>[]
        ];
        killings = this.update_killings(ferz);
        lastcount = 1;
        iter = 0;
        error = 0;
        console.write($"#0000");
        console.writeln($"  ++ {this.alpha[y as i32]}{8 - x}");
        console.writeln(this.repr(this.fill_ferzes_wa(ferz)));
        while (ferz.Count < 8) {
            if (ferz.Count == 0) {
                console.writeln($"Не удалось подобрать расстановку\nдля стартового ферзя на {this.alpha[y as i32]}{8 - x}");
                error = -1;
                break;
            }
            console.write($"#{(iter += 1).ToString().PadLeft(4i32, '0')}");
            i = -1;
            while ((i += 1) < 8) {
                j = -1;
                bd = false;
                while ((j += 1) < 8) {
                    ij = (i, j);
                    if (killings.Contains(ij)) continue;
                    if (prohibs[ferz.Count - 1].Contains(ij)) continue;
                    prohibs[ferz.Count - 1].Add(ij);
                    ferz.Add(ij);
                    killings = this.update_killings(ferz);
                    bd = true;
                    console.writeln($"  ++ {this.alpha[j as i32]}{8 - i}");
                    console.writeln(this.repr(this.fill_ferzes_wa(ferz)));
                    Thread.Sleep(this.sleep);
                    break;
                }
                if (bd) break;
            }
            if (ferz.Count == lastcount) {
                lastferz = ferz |> linq.last();
                console.writeln($"  -- {this.alpha[lastferz.Item2 as i32]}{8 - lastferz.Item1}");
                ferz.RemoveAt((ferz.Count - 1) as i32);
                console.writeln(this.repr(this.fill_ferzes_wa(ferz)));
                Thread.Sleep(this.sleep);
                killings = this.update_killings(ferz);
            }
            lastcount = ferz.Count;
        }
        if (error == 0) {
            console.writeln("---ИТОГОВОЕ  РЕШЕНИЕ---");
            console.writeln(ferz |> linq.select(x => $"{"abcdefgh"[x.Item2 as i32]}{8 - x.Item1}") |> linq.jts(" "));
            return this.repr(this.fill_ferzes_wa(ferz));
        }
        return "";
    };
    
    
}

using console;
using linq;

console.writeln(FERZ.random_placing());
